##LANGS
[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
hook_add='''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]] # terraform syntax highlight
repo = 'hashivim/vim-terraform'
hook_add = '''
let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'fatih/vim-go'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

# LINT
[[plugins]]
repo = 'dense-analysis/ale' # lint
hook_add='''
let g:ale_linters = {'python': ['flake8']}
let g:ale_fixers = {'python': ['autopep8', 'black', 'isort']}

let g:ale_fix_on_save = 0
let g:ale_open_list = 0
let g:ale_sign_column_always = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

##Git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'rhysd/git-messenger.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter' # visualize git diff

##BASE SEtting
[[plugins]]
repo = 'bronson/vim-trailing-whitespace' #visualize not nesessary whitespace after character

[[plugins]]
repo = 'Yggdroot/indentLine' #visualize indent
hook_add='''
let g:indentLine_enabled = 0
let g:indentLine_char = '|'
let g:indentLine_leadingSpaceEnabled = 2
let g:indentLine_leadingSpaceChar = '·'
'''

[[plugins]]
repo = 'cohama/lexima.vim' #support edit bucket

[[plugins]]
repo = 'osyo-manga/vim-over' # support replace

[[plugins]]
repo = 'simeji/winresizer' # support window resize

[[plugins]]
repo = 'rking/ag.vim' # to use Ag command in vim

[[plugins]]
repo = 'ncm2/float-preview.nvim'
hook_source = '''
set completeopt-=preview
let g:float_preview#docked = 0
'''

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add='''
let g:fern#default_hidden=1
let g:fern#renderer='nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim' # display directory and file construct

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim' # search file , buffer
depends = ['airblade/vim-rooter']
hook_add='''
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

lua << EOF
require('telescope').setup({
  width = function(_, max_columns)
          local percentage = 0.5
          local max = 70
          return math.min(math.floor(percentage * max_columns), max)
        end,
  height = function(_, _, max_lines)
    local percentage = 0.5
    local min = 70
    return math.max(math.floor(percentage * max_lines), min)
  end,

  pickers = {
    find_files = {
      previewer = false,
    },
    help_tags = {
      theme = "dropdown",
    },
  }
})
EOF
'''

# telescope-frequencyが依存
[[plugins]]
repo = 'tami5/sqlite.lua'

# telescope-frequencyが依存
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'nvim-telescope/telescope-frecency.nvim'
hook_add = '''
nnoremap <leader>fq <cmd>Telescope frecency<cr>
lua << EOF
require"telescope".load_extension("frecency")
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_add = '''
lua << EOF
require('nvim-treesitter.configs').setup {
  ensure_installed = { 'lua','cue','yaml','toml','python','go','make','html','sql','jsonnet' },
  highlight = {
    enable = true,
  },
}
EOF
'''

[[plugins]]
repo = 'cocopon/iceberg.vim' #colorscheme

[[plugins]]
repo = 'vim-airline/vim-airline' #Custom Airline
hook_add='''
let g:airline#extensions#tabline#formatter='unique_tail'
let g:airline_powerline_fonts=0
let g:airline#extensions#tabline#enabled = 1
nmap <C-p> <Plug>AirlineSelectPrevTab
nmap <C-n> <Plug>AirlineSelectNextTab
let g:airline#extensions#tabline#buffer_idx_mode = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes' #to set ailrline theme
hook_add='''
"let g:airline_theme='minimalist'
'''

[[plugins]]
 repo = 'williamboman/mason.nvim'

[[plugins]]
 repo = 'williamboman/mason-lspconfig.nvim'

[[plugins]]
repo = 'dressing.nvim'
hook_add='''
lua << EOF
require("dressing").setup({
  input = {
    -- Set to false to disable the vim.ui.input implementation
    enabled = true,

    -- Default prompt string
    default_prompt = "Input:",

    -- Can be 'left', 'right', or 'center'
    title_pos = "left",

    -- When true, <Esc> will close the modal
    insert_only = true,

    -- When true, input will start in insert mode.
    start_in_insert = true,

    -- These are passed to nvim_open_win
    border = "rounded",
    -- 'editor' and 'win' will default to being centered
    relative = "cursor",

    -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
    prefer_width = 40,
    width = nil,
    -- min_width and max_width can be a list of mixed types.
    -- min_width = {20, 0.2} means "the greater of 20 columns or 20% of total"
    max_width = { 140, 0.9 },
    min_width = { 20, 0.2 },

    buf_options = {},
    win_options = {
      -- Disable line wrapping
      wrap = false,
      -- Indicator for when text exceeds window
      list = true,
      listchars = "precedes:…,extends:…",
      -- Increase this for more context when text scrolls off the window
      sidescrolloff = 0,
    },

    -- Set to `false` to disable
    mappings = {
      n = {
        ["<Esc>"] = "Close",
        ["<CR>"] = "Confirm",
      },
      i = {
        ["<C-c>"] = "Close",
        ["<CR>"] = "Confirm",
        ["<Up>"] = "HistoryPrev",
        ["<Down>"] = "HistoryNext",
      },
    },

    override = function(conf)
      -- This is the config that will be passed to nvim_open_win.
      -- Change values here to customize the layout
      return conf
    end,

    -- see :help dressing_get_config
    get_config = nil,
  },
  select = {
    -- Set to false to disable the vim.ui.select implementation
    enabled = true,

    -- Priority list of preferred vim.select implementations
    backend = { "telescope", "fzf_lua", "fzf", "builtin", "nui" },

    -- Trim trailing `:` from prompt
    trim_prompt = true,

    -- Options for telescope selector
    -- These are passed into the telescope picker directly. Can be used like:
    -- telescope = require('telescope.themes').get_ivy({...})
    telescope = nil,

    -- Options for fzf selector
    fzf = {
      window = {
        width = 0.5,
        height = 0.4,
      },
    },

    -- Options for fzf-lua
    fzf_lua = {
      -- winopts = {
      --   height = 0.5,
      --   width = 0.5,
      -- },
    },

    -- Options for nui Menu
    nui = {
      position = "50%",
      size = nil,
      relative = "editor",
      border = {
        style = "rounded",
      },
      buf_options = {
        swapfile = false,
        filetype = "DressingSelect",
      },
      win_options = {
        winblend = 0,
      },
      max_width = 80,
      max_height = 40,
      min_width = 40,
      min_height = 10,
    },

    -- Options for built-in selector
    builtin = {
      -- Display numbers for options and set up keymaps
      show_numbers = true,
      -- These are passed to nvim_open_win
      border = "rounded",
      -- 'editor' and 'win' will default to being centered
      relative = "editor",

      buf_options = {},
      win_options = {
        cursorline = true,
        cursorlineopt = "both",
      },

      -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
      -- the min_ and max_ options can be a list of mixed types.
      -- max_width = {140, 0.8} means "the lesser of 140 columns or 80% of total"
      width = nil,
      max_width = { 140, 0.8 },
      min_width = { 40, 0.2 },
      height = nil,
      max_height = 0.9,
      min_height = { 10, 0.2 },

      -- Set to `false` to disable
      mappings = {
        ["<Esc>"] = "Close",
        ["<C-c>"] = "Close",
        ["<CR>"] = "Confirm",
      },

      override = function(conf)
        -- This is the config that will be passed to nvim_open_win.
        -- Change values here to customize the layout
        return conf
      end,
    },

    -- Used to override format_item. See :help dressing-format
    format_item_override = {},

    -- see :help dressing_get_config
    get_config = nil,
  },
})

EOF
'''
